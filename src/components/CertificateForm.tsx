import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Download } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
const certificateSchema = z.object({
  bearerName: z.string().min(2, "Bearer name must be at least 2 characters"),
  nativeOf: z.string().min(2, "Native of must be at least 2 characters"),
  village: z.string().min(2, "Village must be at least 2 characters"),
  dateIssued: z.date({
    required_error: "Date is required"
  })
});
type CertificateFormData = z.infer<typeof certificateSchema>;
interface GeneratedCertificate {
  pdf?: string;
  qrCode: string;
  certificateNumber: string;
  success: boolean;
}
const CertificateForm = () => {
  const [loading, setLoading] = useState(false);
  const [generatedCertificate, setGeneratedCertificate] = useState<GeneratedCertificate | null>(null);
  const [certificateHTML, setCertificateHTML] = useState<string>("");
  const [autoGeneratedRefs, setAutoGeneratedRefs] = useState({
    ourRef: "",
    yourRef: "",
    certificateNumber: ""
  });
  const {
    toast
  } = useToast();
  const form = useForm<CertificateFormData>({
    resolver: zodResolver(certificateSchema),
    defaultValues: {
      bearerName: "",
      nativeOf: "",
      village: "",
      dateIssued: new Date()
    }
  });

  // Generate reference numbers on component mount
  useEffect(() => {
    const generateRefs = async () => {
      try {
        const {
          data: ourRefData
        } = await supabase.rpc('generate_our_ref');
        const {
          data: yourRefData
        } = await supabase.rpc('generate_your_ref');
        const {
          data: certNumberData
        } = await supabase.rpc('generate_certificate_number');
        setAutoGeneratedRefs({
          ourRef: ourRefData || "",
          yourRef: yourRefData || "",
          certificateNumber: certNumberData || ""
        });
      } catch (error) {
        console.error('Error generating refs:', error);
      }
    };
    generateRefs();
  }, []);
  const downloadPDF = (pdfData: string, filename: string) => {
    const link = document.createElement('a');
    link.href = pdfData;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const printCertificate = (html: string) => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(html);
      printWindow.document.close();
      printWindow.focus();
      
      // Wait for the document to load before printing
      printWindow.onload = () => {
        printWindow.print();
      };
      
      // Fallback for browsers that don't support onload
      setTimeout(() => {
        printWindow.print();
      }, 1000);
    }
  };
  const onSubmit = async (data: CertificateFormData) => {
    setLoading(true);
    try {
      // Get current user
      const {
        data: {
          user
        },
        error: userError
      } = await supabase.auth.getUser();
      if (userError || !user) {
        toast({
          title: "Error",
          description: "You must be logged in to create certificates",
          variant: "destructive"
        });
        return;
      }

      // Use the pre-generated reference numbers
      const ourRef = autoGeneratedRefs.ourRef;
      const yourRef = autoGeneratedRefs.yourRef;
      const certificateNumber = autoGeneratedRefs.certificateNumber;

      // Create QR code data (URL for verification)
      const qrCodeData = `${window.location.origin}/verify?cert_id=${certificateNumber}`;

      // Generate the certificate PDF
      const certificateGenResponse = await supabase.functions.invoke('generate-certificate', {
        body: {
          ourRef,
          yourRef,
          dateIssued: format(data.dateIssued, 'yyyy-MM-dd'),
          certificateNumber,
          bearerName: data.bearerName,
          nativeOf: data.nativeOf,
          village: data.village,
          qrCodeData
        }
      });
      if (certificateGenResponse.error) {
        throw new Error(certificateGenResponse.error.message || 'Failed to generate certificate');
      }
      const certificateData = certificateGenResponse.data;
      
      // Store HTML separately to avoid performance issues
      setCertificateHTML(certificateData.html || "");
      
      // Set certificate data without the large HTML string
      setGeneratedCertificate({
        pdf: certificateData.pdf,
        qrCode: certificateData.qrCode,
        certificateNumber: certificateData.certificateNumber,
        success: certificateData.success
      });

      // Insert certificate into database
      const {
        data: certificate,
        error: insertError
      } = await supabase.from('certificates').insert({
        our_ref: ourRef,
        your_ref: yourRef,
        date_issued: format(data.dateIssued, 'yyyy-MM-dd'),
        certificate_number: certificateNumber,
        bearer_name: data.bearerName,
        native_of: data.nativeOf,
        village: data.village,
        qr_code_data: qrCodeData,
        certificate_file_url: `certificate_${certificateNumber}.html`,
        created_by: user.id
      }).select().single();
      if (insertError) {
        throw insertError;
      }
      toast({
        title: "Success",
        description: `Certificate ${certificateNumber} generated successfully!`
      });

      // Generate new reference numbers for next certificate
      const {
        data: newOurRef
      } = await supabase.rpc('generate_our_ref');
      const {
        data: newYourRef
      } = await supabase.rpc('generate_your_ref');
      const {
        data: newCertNumber
      } = await supabase.rpc('generate_certificate_number');
      setAutoGeneratedRefs({
        ourRef: newOurRef || "",
        yourRef: newYourRef || "",
        certificateNumber: newCertNumber || ""
      });

      // Reset form
      form.reset();
    } catch (error: any) {
      console.error('Certificate creation error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create certificate",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };
  return <div className="space-y-6">
      {/* Auto-generated Reference Numbers Display */}
      <div className="bg-muted/50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">Auto-Generated References</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div>
            <Label className="text-muted-foreground">Our Ref</Label>
            <p className="font-mono">{autoGeneratedRefs.ourRef || "Generating..."}</p>
          </div>
          <div>
            <Label className="text-muted-foreground">Your Ref</Label>
            <p className="font-mono">{autoGeneratedRefs.yourRef || "Generating..."}</p>
          </div>
          <div>
            <Label className="text-muted-foreground">Certificate Number</Label>
            <p className="font-mono">{autoGeneratedRefs.certificateNumber || "Generating..."}</p>
          </div>
        </div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField control={form.control} name="bearerName" render={({
            field
          }) => <FormItem>
                  <FormLabel>Bearer Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter full name of bearer" {...field} />
                  </FormControl>
                  <FormDescription>
                    Full name of the person receiving the certificate
                  </FormDescription>
                  <FormMessage />
                </FormItem>} />

            <FormField control={form.control} name="dateIssued" render={({
            field
          }) => <FormItem className="flex flex-col">
                  <FormLabel>Date of Issuance</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button variant={"outline"} className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}>
                          {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar mode="single" selected={field.value} onSelect={field.onChange} disabled={date => date > new Date() || date < new Date("1900-01-01")} initialFocus />
                    </PopoverContent>
                  </Popover>
                  <FormDescription>
                    Date when the certificate is being issued
                  </FormDescription>
                  <FormMessage />
                </FormItem>} />

            <FormField control={form.control} name="nativeOf" render={({
            field
          }) => <FormItem>
                  <FormLabel>Native Of Ekpuk</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter city or town of origin" {...field} />
                  </FormControl>
                  <FormDescription>
                    City or town where the bearer is from
                  </FormDescription>
                  <FormMessage />
                </FormItem>} />

            <FormField control={form.control} name="village" render={({
            field
          }) => <FormItem>
                  <FormLabel>Village</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter village name" {...field} />
                  </FormControl>
                  <FormDescription>
                    Specific village within the city/town
                  </FormDescription>
                  <FormMessage />
                </FormItem>} />
          </div>

          <div className="flex justify-end">
            <Button type="submit" disabled={loading || !autoGeneratedRefs.certificateNumber} className="min-w-32">
              {loading ? "Generating..." : "Generate Certificate"}
            </Button>
          </div>
        </form>
      </Form>

      {/* Generated Certificate Display */}
      {generatedCertificate && <div className="border rounded-lg p-6 space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-green-800">Certificate Generated Successfully!</h3>
            <div className="flex gap-2">
              {generatedCertificate.pdf && <Button onClick={() => downloadPDF(generatedCertificate.pdf!, `certificate_${generatedCertificate.certificateNumber}.pdf`)} className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Download PDF
                </Button>}
              {certificateHTML && <Button onClick={() => printCertificate(certificateHTML)} variant="outline" className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Print Certificate
                </Button>}
            </div>
          </div>
          
          <div className="bg-muted/30 p-4 rounded">
            <p className="text-sm text-muted-foreground mb-2">Certificate Number:</p>
            <p className="font-mono font-bold">{generatedCertificate.certificateNumber}</p>
          </div>

          {generatedCertificate.qrCode && <div className="flex items-center gap-4">
              <div>
                <p className="text-sm text-muted-foreground mb-2">QR Code for Verification:</p>
                <img src={generatedCertificate.qrCode} alt="QR Code" className="w-24 h-24 border rounded" />
              </div>
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">
                  This QR code can be scanned to verify the certificate authenticity. 
                  It links directly to the verification portal.
                </p>
              </div>
            </div>}

          {!generatedCertificate.pdf && certificateHTML && <div className="bg-blue-50 border border-blue-200 rounded p-4">
              <p className="text-sm text-blue-800">
                Certificate generated successfully! Use the "Print Certificate" button above to print or save as PDF using your browser's print function.
              </p>
            </div>}
        </div>}
    </div>;
};
export default CertificateForm;