import { useState, useEffect, useCallback, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { format } from "date-fns";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CalendarIcon, Download, FileText, User, MapPin, Calendar, CheckCircle, Loader2 } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { cn } from "@/lib/utils";

const certificateSchema = z.object({
  bearerName: z.string().min(2, "Bearer name must be at least 2 characters"),
  nativeOf: z.string().min(2, "Native of must be at least 2 characters"),
  village: z.string().min(2, "Village must be at least 2 characters"),
  dateIssued: z.date({
    required_error: "Date is required"
  })
});

type CertificateFormData = z.infer<typeof certificateSchema>;

interface GeneratedCertificate {
  pdf?: string;
  qrCode: string;
  certificateNumber: string;
  success: boolean;
}

const CertificateForm = () => {
  const [loading, setLoading] = useState(false);
  const [generatedCertificate, setGeneratedCertificate] = useState<GeneratedCertificate | null>(null);
  const [certificateHTML, setCertificateHTML] = useState<string>("");
  const [autoGeneratedRefs, setAutoGeneratedRefs] = useState({
    ourRef: "",
    yourRef: "",
    certificateNumber: ""
  });
  
  const { toast } = useToast();
  
  const form = useForm<CertificateFormData>({
    resolver: zodResolver(certificateSchema),
    defaultValues: {
      bearerName: "",
      nativeOf: "",
      village: "",
      dateIssued: new Date()
    }
  });

  // Optimized reference fetching with useCallback
  const fetchReferences = useCallback(async () => {
    try {
      const [ourRefRes, yourRefRes, certNumRes] = await Promise.all([
        supabase.rpc('generate_our_ref'),
        supabase.rpc('generate_your_ref'),
        supabase.rpc('generate_certificate_number')
      ]);
      
      setAutoGeneratedRefs({
        ourRef: ourRefRes.data || "",
        yourRef: yourRefRes.data || "",
        certificateNumber: certNumRes.data || ""
      });
    } catch (error) {
      console.error('Error fetching references:', error);
    }
  }, []);

  useEffect(() => {
    fetchReferences();
  }, [fetchReferences]);

  // Optimized download function
  const downloadPDF = useCallback((pdfData: string, filename: string) => {
    const link = document.createElement('a');
    link.href = pdfData;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }, []);

  // Optimized print function
  const printCertificate = useCallback((html: string) => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(html);
      printWindow.document.close();
      printWindow.focus();
      
      printWindow.onload = () => {
        printWindow.print();
      };
      
      setTimeout(() => {
        printWindow.print();
      }, 500);
    }
  }, []);

  // Optimized form submission
  const onSubmit = useCallback(async (data: CertificateFormData) => {
    setLoading(true);
    try {
      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        toast({
          title: "Error",
          description: "You must be logged in to create certificates",
          variant: "destructive"
        });
        return;
      }

      const { ourRef, yourRef, certificateNumber } = autoGeneratedRefs;
      const qrCodeData = `${window.location.origin}/verify?cert_id=${certificateNumber}`;

      // Generate certificate and save to database in parallel
      const [certificateGenResponse] = await Promise.all([
        supabase.functions.invoke('generate-certificate', {
          body: {
            ourRef,
            yourRef,
            dateIssued: format(data.dateIssued, 'yyyy-MM-dd'),
            certificateNumber,
            bearerName: data.bearerName,
            nativeOf: data.nativeOf,
            village: data.village,
            qrCodeData
          }
        }),
        // Save to database concurrently
        supabase.from('certificates').insert({
          our_ref: ourRef,
          your_ref: yourRef,
          date_issued: format(data.dateIssued, 'yyyy-MM-dd'),
          certificate_number: certificateNumber,
          bearer_name: data.bearerName,
          native_of: data.nativeOf,
          village: data.village,
          qr_code_data: qrCodeData,
          certificate_file_url: `certificate_${certificateNumber}.html`,
          created_by: user.id
        })
      ]);

      if (certificateGenResponse.error) {
        throw new Error(certificateGenResponse.error.message || 'Failed to generate certificate');
      }

      const certificateData = certificateGenResponse.data;
      
      // Store HTML separately and set certificate data
      setCertificateHTML(certificateData.html || "");
      setGeneratedCertificate({
        pdf: certificateData.pdf,
        qrCode: certificateData.qrCode,
        certificateNumber: certificateData.certificateNumber,
        success: certificateData.success
      });

      toast({
        title: "Success",
        description: `Certificate ${certificateNumber} generated successfully!`
      });

      // Generate new references for next certificate
      await fetchReferences();
      form.reset();
      
    } catch (error: any) {
      console.error('Certificate creation error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create certificate",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  }, [autoGeneratedRefs, toast, fetchReferences, form]);

  // Memoized reference display to prevent unnecessary re-renders
  const referenceDisplay = useMemo(() => (
    <Card className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 border-green-200 dark:border-green-700 transition-all duration-300">
      <CardContent className="pt-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg backdrop-blur-sm transition-all duration-200 hover:bg-white/70 dark:hover:bg-gray-800/70">
            <Label className="text-xs font-medium text-green-700 dark:text-green-300">Our Reference</Label>
            <p className="font-mono text-sm font-bold mt-1">{autoGeneratedRefs.ourRef || "Loading..."}</p>
          </div>
          <div className="text-center p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg backdrop-blur-sm transition-all duration-200 hover:bg-white/70 dark:hover:bg-gray-800/70">
            <Label className="text-xs font-medium text-blue-700 dark:text-blue-300">Your Reference</Label>
            <p className="font-mono text-sm font-bold mt-1">{autoGeneratedRefs.yourRef || "Loading..."}</p>
          </div>
          <div className="text-center p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg backdrop-blur-sm transition-all duration-200 hover:bg-white/70 dark:hover:bg-gray-800/70">
            <Label className="text-xs font-medium text-purple-700 dark:text-purple-300">Certificate Number</Label>
            <p className="font-mono text-sm font-bold mt-1">{autoGeneratedRefs.certificateNumber || "Loading..."}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  ), [autoGeneratedRefs]);

  return (
    <div className="space-y-6 animate-in fade-in-50 duration-500">
      {referenceDisplay}

      <Card className="transition-all duration-300 hover:shadow-lg">
        <CardHeader className="bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-t-lg">
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Generate Certificate of Origin
          </CardTitle>
          <CardDescription className="text-green-50">
            Fill in the details below to generate a new certificate
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="bearerName"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="flex items-center gap-2 text-sm font-medium">
                        <User className="h-4 w-4 text-green-600" />
                        Bearer Name
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter full name" 
                          {...field} 
                          className="transition-all duration-200 focus:ring-2 focus:ring-green-500/20 focus:border-green-500"
                        />
                      </FormControl>
                      <FormDescription>
                        Full name of the certificate bearer
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="dateIssued"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="flex items-center gap-2 text-sm font-medium">
                        <Calendar className="h-4 w-4 text-blue-600" />
                        Date of Issuance
                      </FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant="outline"
                              className={cn(
                                "w-full pl-3 text-left font-normal transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-800",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <CalendarComponent
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormDescription>
                        Date when the certificate is issued
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="nativeOf"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="flex items-center gap-2 text-sm font-medium">
                        <MapPin className="h-4 w-4 text-purple-600" />
                        Native Of (Clan)
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter clan or family group" 
                          {...field} 
                          className="transition-all duration-200 focus:ring-2 focus:ring-purple-500/20 focus:border-purple-500"
                        />
                      </FormControl>
                      <FormDescription>
                        Clan or family group affiliation
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="village"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="flex items-center gap-2 text-sm font-medium">
                        <MapPin className="h-4 w-4 text-orange-600" />
                        Village
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter village name" 
                          {...field} 
                          className="transition-all duration-200 focus:ring-2 focus:ring-orange-500/20 focus:border-orange-500"
                        />
                      </FormControl>
                      <FormDescription>
                        Specific village within the city/town
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex justify-end">
                <Button 
                  type="submit" 
                  disabled={loading || !autoGeneratedRefs.certificateNumber} 
                  className="min-w-32 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105"
                >
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <FileText className="mr-2 h-4 w-4" />
                      Generate Certificate
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Success Animation */}
      {generatedCertificate && (
        <Card className="border-green-200 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950 animate-in slide-in-from-bottom-4 duration-500">
          <CardContent className="pt-6">
            <div className="text-center space-y-4">
              <div className="flex justify-center">
                <div className="relative">
                  <CheckCircle className="h-16 w-16 text-green-600 animate-pulse" />
                  <div className="absolute inset-0 bg-green-400/20 rounded-full animate-ping"></div>
                </div>
              </div>
              
              <div>
                <h3 className="text-xl font-bold text-green-800 dark:text-green-200 mb-2">
                  Certificate Generated Successfully! 🎉
                </h3>
                <p className="text-green-600 dark:text-green-400">
                  Certificate Number: <span className="font-mono font-bold">{generatedCertificate.certificateNumber}</span>
                </p>
              </div>

              <div className="flex flex-wrap justify-center gap-3">
                {generatedCertificate.pdf && (
                  <Button 
                    onClick={() => downloadPDF(generatedCertificate.pdf!, `certificate_${generatedCertificate.certificateNumber}.pdf`)} 
                    className="bg-blue-600 hover:bg-blue-700 transition-all duration-200 transform hover:scale-105"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download PDF
                  </Button>
                )}
                {certificateHTML && (
                  <Button 
                    onClick={() => printCertificate(certificateHTML)} 
                    variant="outline" 
                    className="border-green-600 text-green-600 hover:bg-green-50 dark:hover:bg-green-950 transition-all duration-200 transform hover:scale-105"
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    Print Certificate
                  </Button>
                )}
              </div>

              {generatedCertificate.qrCode && (
                <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border-2 border-dashed border-green-300 dark:border-green-700 mx-auto max-w-sm">
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 text-center">QR Code for Verification</p>
                  <div className="flex justify-center">
                    <img 
                      src={generatedCertificate.qrCode} 
                      alt="QR Code" 
                      className="w-24 h-24 border rounded-lg shadow-sm" 
                    />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">
                    Scan to verify certificate authenticity
                  </p>
                </div>
              )}

              {!generatedCertificate.pdf && certificateHTML && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 dark:bg-blue-950 dark:border-blue-700">
                  <p className="text-sm text-blue-800 dark:text-blue-200">
                    💡 Use the "Print Certificate" button to save as PDF using your browser's print function.
                  </p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CertificateForm;