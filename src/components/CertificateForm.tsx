import { useState, useEffect, useCallback, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { format } from "date-fns";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CalendarIcon, Download, FileText, User, MapPin, Calendar, CheckCircle, Loader2, Sparkles, Award, ImageIcon, Upload } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { cn } from "@/lib/utils";

const certificateSchema = z.object({
  bearerName: z.string()
    .min(2, "Bearer name must be at least 2 characters")
    .max(100, "Bearer name must not exceed 100 characters")
    .regex(/^[a-zA-Z\s\-'\.]+$/, "Bearer name can only contain letters, spaces, hyphens, apostrophes, and periods")
    .refine(val => !/<[^>]*>/.test(val), "HTML tags are not allowed"),
  nativeOf: z.string()
    .min(2, "Native of must be at least 2 characters")
    .max(100, "Native of must not exceed 100 characters")
    .regex(/^[a-zA-Z\s\-'\.]+$/, "Native of can only contain letters, spaces, hyphens, apostrophes, and periods")
    .refine(val => !/<[^>]*>/.test(val), "HTML tags are not allowed"),
  village: z.string()
    .min(2, "Village must be at least 2 characters")
    .max(100, "Village must not exceed 100 characters")
    .regex(/^[a-zA-Z\s\-'\.]+$/, "Village can only contain letters, spaces, hyphens, apostrophes, and periods")
    .refine(val => !/<[^>]*>/.test(val), "HTML tags are not allowed"),
  dateIssued: z.date({
    required_error: "Date is required"
  }),
  passportPhoto: z
    .instanceof(File)
    .refine((file) => file.size > 0, "Passport photo is required")
    .refine((file) => file.size <= 5 * 1024 * 1024, "File size must be less than 5MB")
    .refine((file) => ["image/jpeg", "image/jpg", "image/png", "image/webp"].includes(file.type), 
      "Only JPEG, PNG, and WebP image files are allowed")
});

type CertificateFormData = z.infer<typeof certificateSchema>;

interface GeneratedCertificate {
  pdf?: string;
  qrCode: string;
  certificateNumber: string;
  success: boolean;
}

const CertificateForm = () => {
  const [loading, setLoading] = useState(false);
  const [generatedCertificate, setGeneratedCertificate] = useState<GeneratedCertificate | null>(null);
  const [certificateHTML, setCertificateHTML] = useState<string>("");
  const [autoGeneratedRefs, setAutoGeneratedRefs] = useState({
    ourRef: "",
    yourRef: "",
    certificateNumber: ""
  });
  
  const { toast } = useToast();
  
  const form = useForm<CertificateFormData>({
    resolver: zodResolver(certificateSchema),
    defaultValues: {
      bearerName: "",
      nativeOf: "",
      village: "",
      dateIssued: new Date(),
      passportPhoto: new File([], '')
    }
  });

  // Optimized reference fetching with useCallback
  const fetchReferences = useCallback(async () => {
    try {
      const [ourRefRes, yourRefRes, certNumRes] = await Promise.all([
        supabase.rpc('generate_our_ref'),
        supabase.rpc('generate_your_ref'),
        supabase.rpc('generate_certificate_number')
      ]);
      
      setAutoGeneratedRefs({
        ourRef: ourRefRes.data || "",
        yourRef: yourRefRes.data || "",
        certificateNumber: certNumRes.data || ""
      });
    } catch (error) {
      console.error('Error fetching references:', error);
    }
  }, []);

  useEffect(() => {
    // Don't generate references on page load
    // fetchReferences();
  }, [fetchReferences]);

  // Optimized download function
  const downloadPDF = useCallback((pdfData: string, filename: string) => {
    const link = document.createElement('a');
    link.href = pdfData;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }, []);

  // Optimized download function for HTML fallback
  const downloadHTML = useCallback((htmlData: string, filename: string) => {
    const blob = new Blob([htmlData], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, []);

  // Optimized print function with mobile fallback
  const printCertificate = useCallback((html: string) => {
    // Check if we're on mobile
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    if (isMobile) {
      // On mobile, offer HTML download instead of print (print dialogs often fail on mobile)
      toast({
        title: "Mobile Print",
        description: "On mobile devices, we'll download the certificate as HTML which you can then print or save.",
      });
      downloadHTML(html, `certificate_${generatedCertificate?.certificateNumber || 'download'}.html`);
      return;
    }
    
    // Desktop print functionality
    const printWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
    if (printWindow) {
      printWindow.document.write(html);
      printWindow.document.close();
      printWindow.focus();
      
      printWindow.onload = () => {
        printWindow.print();
      };
      
      setTimeout(() => {
        printWindow.print();
      }, 500);
    } else {
      // Fallback if popup blocked
      toast({
        title: "Print Blocked",
        description: "Please allow popups and try again, or download the HTML version instead.",
        variant: "destructive"
      });
    }
  }, [downloadHTML, generatedCertificate, toast]);

  // Optimized form submission with duplicate check
  const onSubmit = useCallback(async (data: CertificateFormData) => {
    setLoading(true);
    try {
      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        toast({
          title: "Error",
          description: "You must be logged in to create certificates",
          variant: "destructive"
        });
        return;
      }

      // Check if bearer already has a certificate this year
      const { data: existingCert, error: checkError } = await supabase
        .rpc('check_bearer_certificate_exists', { bearer_name_input: data.bearerName });
      
      if (checkError) {
        throw new Error('Failed to check for existing certificates');
      }
      
      if (existingCert) {
        toast({
          title: "Certificate Already Exists",
          description: `A valid certificate for "${data.bearerName}" already exists for ${new Date().getFullYear()}. Each person can only have one certificate per year.`,
          variant: "destructive"
        });
        return;
      }

      // Convert passport photo to base64
      let passportPhotoBase64 = null;
      if (data.passportPhoto && data.passportPhoto.size > 0) {
        try {
          const reader = new FileReader();
          passportPhotoBase64 = await new Promise<string>((resolve, reject) => {
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(data.passportPhoto);
          });
        } catch (error) {
          console.error('Error converting passport photo to base64:', error);
          toast({
            title: "Error",
            description: "Failed to process passport photo. Please try again.",
            variant: "destructive"
          });
          return;
        }
      }

      // Generate fresh references for this certificate
      const [ourRefRes, yourRefRes, certNumRes] = await Promise.all([
        supabase.rpc('generate_our_ref'),
        supabase.rpc('generate_your_ref'),
        supabase.rpc('generate_certificate_number')
      ]);

      const ourRef = ourRefRes.data || "";
      const yourRef = yourRefRes.data || "";
      const certificateNumber = certNumRes.data || "";

      const qrCodeData = `${window.location.origin}/verify?cert_id=${certificateNumber}`;

      // Generate certificate and save to database in parallel
      const [certificateGenResponse] = await Promise.all([
        supabase.functions.invoke('generate-certificate', {
          body: {
            ourRef,
            yourRef,
            dateIssued: format(data.dateIssued, 'yyyy-MM-dd'),
            certificateNumber,
            bearerName: data.bearerName,
            nativeOf: data.nativeOf,
            village: data.village,
            qrCodeData,
            passportPhoto: passportPhotoBase64
          }
        }),
        // Save to database concurrently
        supabase.from('certificates').insert({
          our_ref: ourRef,
          your_ref: yourRef,
          date_issued: format(data.dateIssued, 'yyyy-MM-dd'),
          certificate_number: certificateNumber,
          bearer_name: data.bearerName,
          native_of: data.nativeOf,
          village: data.village,
          qr_code_data: qrCodeData,
          certificate_file_url: `certificate_${certificateNumber}.html`,
          certificate_html_url: null, // Will be updated after generation
          created_by: user.id
        })
      ]);

      if (certificateGenResponse.error) {
        throw new Error(certificateGenResponse.error.message || 'Failed to generate certificate');
      }

      const certificateData = certificateGenResponse.data;
      
      // Update database with storage URLs if available
      const updateData: any = {};
      if (certificateData.htmlUrl) {
        updateData.certificate_html_url = certificateData.htmlUrl;
      }
      if (certificateData.pdfUrl) {
        updateData.certificate_pdf_url = certificateData.pdfUrl;
      }
      
      if (Object.keys(updateData).length > 0) {
        await supabase
          .from('certificates')
          .update(updateData)
          .eq('certificate_number', certificateNumber);
      }
      
      // Store HTML separately and set certificate data
      setCertificateHTML(certificateData.html || "");
      setGeneratedCertificate({
        pdf: certificateData.pdf,
        qrCode: certificateData.qrCode,
        certificateNumber: certificateData.certificateNumber,
        success: certificateData.success
      });

      toast({
        title: "Success",
        description: `Certificate ${certificateNumber} generated and stored successfully!`
      });

      // Generate new references for next certificate
      await fetchReferences();
      form.reset();
      
    } catch (error: any) {
      console.error('Certificate creation error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create certificate",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  }, [toast, fetchReferences, form]);

  return (
    <div className="space-y-6 animate-in fade-in-50 duration-500">
      <Card className="transition-all duration-300 hover:shadow-xl border-0 shadow-lg">
        <CardHeader className="bg-gradient-to-r from-green-600 via-emerald-600 to-blue-600 text-white rounded-t-lg">
          <CardTitle className="flex items-center gap-3 text-xl">
            <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center backdrop-blur-sm">
              <FileText className="h-5 w-5" />
            </div>
            Generate Certificate of Origin
          </CardTitle>
          <CardDescription className="text-green-50 text-base">
            Fill in the details below to generate a new certificate
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-8 pb-8">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <FormField
                  control={form.control}
                  name="bearerName"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel className="flex items-center gap-2 text-base font-semibold">
                        <User className="h-4 w-4 text-green-600" />
                        Bearer Name
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter full name" 
                          {...field} 
                          className="h-12 transition-all duration-200 focus:ring-2 focus:ring-green-500/20 focus:border-green-500 border-green-200"
                        />
                      </FormControl>
                      <FormDescription>
                        Full name of the certificate bearer
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="dateIssued"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel className="flex items-center gap-2 text-base font-semibold">
                        <Calendar className="h-4 w-4 text-blue-600" />
                        Date of Issuance
                      </FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant="outline"
                              className={cn(
                                "w-full h-12 pl-3 text-left font-normal transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-800 border-blue-200",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <CalendarComponent
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormDescription>
                        Date when the certificate is issued
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="nativeOf"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel className="flex items-center gap-2 text-base font-semibold">
                        <MapPin className="h-4 w-4 text-purple-600" />
                        Native Of (Clan)
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter clan or family group" 
                          {...field} 
                          className="h-12 transition-all duration-200 focus:ring-2 focus:ring-purple-500/20 focus:border-purple-500 border-purple-200"
                        />
                      </FormControl>
                      <FormDescription>
                        Clan or family group affiliation
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="village"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel className="flex items-center gap-2 text-base font-semibold">
                        <MapPin className="h-4 w-4 text-orange-600" />
                        Village
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="Enter village name" 
                          {...field} 
                          className="h-12 transition-all duration-200 focus:ring-2 focus:ring-orange-500/20 focus:border-orange-500 border-orange-200"
                        />
                      </FormControl>
                      <FormDescription>
                        Specific village within the city/town
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                 />
               </div>

               {/* Passport Photo Upload Field */}
               <div className="space-y-6">
                 <FormField
                   control={form.control}
                   name="passportPhoto"
                   render={({ field: { onChange, value, ...field } }) => (
                     <FormItem className="space-y-3">
                       <FormLabel className="flex items-center gap-2 text-base font-semibold">
                         <ImageIcon className="h-4 w-4 text-red-600" />
                         Passport Photo
                       </FormLabel>
                       <FormControl>
                         <div className="border-2 border-dashed border-red-200 rounded-lg p-6 hover:border-red-300 transition-colors duration-200">
                           <div className="text-center">
                             <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                             <div className="flex justify-center">
                               <label
                                 htmlFor="passport-upload"
                                 className="cursor-pointer bg-red-50 hover:bg-red-100 text-red-600 px-4 py-2 rounded-md font-medium transition-colors duration-200 border border-red-200"
                               >
                                 Choose passport photo
                                 <input
                                   id="passport-upload"
                                   type="file"
                                   className="hidden"
                                   accept="image/jpeg,image/jpg,image/png,image/webp"
                                   onChange={(e) => {
                                     const file = e.target.files?.[0];
                                     if (file) {
                                       onChange(file);
                                     }
                                   }}
                                   {...field}
                                 />
                               </label>
                             </div>
                             {value?.name && (
                               <p className="mt-2 text-sm text-gray-600">
                                 Selected: {value.name}
                               </p>
                             )}
                             <p className="mt-2 text-xs text-gray-500">
                               PNG, JPG, WebP up to 5MB
                             </p>
                           </div>
                         </div>
                       </FormControl>
                       <FormDescription>
                         Upload a clear passport-style photo (required for certificate)
                       </FormDescription>
                       <FormMessage />
                     </FormItem>
                   )}
                 />
               </div>

               <div className="flex justify-end">
                <Button 
                  type="submit" 
                  disabled={loading} 
                  className="min-w-40 h-12 bg-gradient-to-r from-green-600 via-emerald-600 to-blue-600 hover:from-green-700 hover:via-emerald-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105 shadow-lg text-base font-semibold"
                >
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Award className="mr-2 h-5 w-5" />
                      Generate Certificate
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Success Animation */}
      {generatedCertificate && (
        <Card className="border-green-200 bg-gradient-to-r from-green-50 via-emerald-50 to-teal-50 dark:from-green-950 dark:via-emerald-950 dark:to-teal-950 animate-in slide-in-from-bottom-4 duration-500 shadow-xl">
          <CardContent className="pt-8 pb-8">
            <div className="text-center space-y-4">
              <div className="flex justify-center">
                <div className="relative">
                  <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center shadow-lg">
                    <CheckCircle className="h-10 w-10 text-white animate-pulse" />
                  </div>
                  <div className="absolute inset-0 bg-green-400/30 rounded-full animate-ping"></div>
                </div>
              </div>
              
              <div>
                <h3 className="text-2xl font-bold text-green-800 dark:text-green-200 mb-3">
                  Certificate Generated Successfully! 🎉
                </h3>
                <p className="text-green-600 dark:text-green-400 text-lg">
                  Certificate Number: <span className="font-mono font-bold bg-green-100 dark:bg-green-900/30 px-3 py-1 rounded-lg">{generatedCertificate.certificateNumber}</span>
                </p>
              </div>

              <div className="flex flex-col sm:flex-row flex-wrap justify-center gap-3 sm:gap-4">
                {generatedCertificate.pdf && (
                  <Button 
                    onClick={() => downloadPDF(generatedCertificate.pdf!, `certificate_${generatedCertificate.certificateNumber}.pdf`)} 
                    className="bg-blue-600 hover:bg-blue-700 transition-all duration-200 transform hover:scale-105 shadow-lg h-12 px-6 w-full sm:w-auto"
                  >
                    <Download className="h-5 w-5 mr-2" />
                    Download PDF
                  </Button>
                )}
                {certificateHTML && (
                  <Button 
                    onClick={() => printCertificate(certificateHTML)} 
                    variant="outline" 
                    className="border-2 border-green-600 text-green-600 hover:bg-green-50 dark:hover:bg-green-950 transition-all duration-200 transform hover:scale-105 shadow-lg h-12 px-6 w-full sm:w-auto"
                  >
                    <FileText className="h-5 w-5 mr-2" />
                    Print/Save Certificate
                  </Button>
                )}
                {certificateHTML && !generatedCertificate.pdf && (
                  <Button 
                    onClick={() => downloadHTML(certificateHTML, `certificate_${generatedCertificate.certificateNumber}.html`)} 
                    variant="secondary"
                    className="h-12 px-6 w-full sm:w-auto"
                  >
                    <Download className="h-5 w-5 mr-2" />
                    Download HTML
                  </Button>
                )}
              </div>

              {generatedCertificate.qrCode && (
                <div className="bg-white dark:bg-gray-800 p-6 rounded-xl border-2 border-dashed border-green-300 dark:border-green-700 mx-auto max-w-sm shadow-lg">
                  <p className="text-sm font-semibold text-gray-600 dark:text-gray-400 mb-4 text-center">QR Code for Verification</p>
                  <div className="flex justify-center">
                    <img 
                      src={generatedCertificate.qrCode} 
                      alt="QR Code" 
                      className="w-28 h-28 border rounded-xl shadow-md" 
                    />
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-3 text-center">
                    Scan to verify certificate authenticity
                  </p>
                </div>
              )}

              {!generatedCertificate.pdf && certificateHTML && (
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 dark:bg-blue-950 dark:border-blue-700">
                  <p className="text-sm text-blue-800 dark:text-blue-200 leading-relaxed text-center">
                    📱 <strong>Mobile Users:</strong> Use "Download HTML" then open the file to print as PDF<br />
                    🖥️ <strong>Desktop Users:</strong> Use "Print Certificate" to save as PDF from your browser
                  </p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CertificateForm;